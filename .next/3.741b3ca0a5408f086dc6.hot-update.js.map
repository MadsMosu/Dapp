{"version":3,"sources":["webpack:///./pages/index.js?f7ee"],"names":["SamplePage","props","bloodSampleIndicators","map","donation","index","cellTissueSampleIndicators","Header","Row","HeaderCell","Body","renderBloodRows","renderCellTissueRows","employeeWallet","ethers","Wallet","SampleStore","Contract","bloodCount","functions","bloodSampleCount","then","value","cellTissueCount","cellTissueSampleCount","i","getBloodSampleIndicatorByIndex","result","bloodSample","id","parseInt","signer","inStorage","push","getCellTissueSampleIndicatorByIndex","cellTissueSample"],"mappings":"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","file":"3.741b3ca0a5408f086dc6.hot-update.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../components/Layout';\r\nimport { Table, Checkbox, Label } from 'semantic-ui-react';\r\nimport ethers from 'ethers';\r\nimport provider from '../utils/configs/provider';\r\nimport abi from '../utils/abi/sampleStore';\r\nimport contractAddr from '../utils/addresses/sampleStore';\r\nimport BloodSampleRow from '../components/BloodSampleRow';\r\nimport CellTissueSampleRow from '../components/CellTissueSampleRow';\r\n\r\nclass SamplePage extends Component {\r\n\r\n    static async getInitialProps() {\r\n        const employeeWallet = new ethers.Wallet(\"0x274d1e42f06076e6d3ef981f0c244750827ccf56b19768816618e9217129a030\", provider);\r\n        const SampleStore = new ethers.Contract(contractAddr, abi, employeeWallet);\r\n    \r\n        let bloodCount;\r\n        await SampleStore.functions.bloodSampleCount().then(function(value) {\r\n            bloodCount = value;\r\n        });\r\n\r\n        let cellTissueCount;\r\n        await SampleStore.functions.cellTissueSampleCount().then(function(value) {\r\n            cellTissueCount = value;\r\n        });\r\n\r\n        let bloodSampleIndicators = [];\r\n        for(let i = 1; i<bloodCount; i++) {\r\n            await SampleStore.functions.getBloodSampleIndicatorByIndex(i).then(function(result) {\r\n            const bloodSample = {\r\n                id: parseInt(result[0]),\r\n                signer: result[1],\r\n                inStorage: result[2]\r\n            };\r\n            bloodSampleIndicators.push(bloodSample);\r\n        });\r\n        };\r\n           \r\n        let cellTissueSampleIndicators = [];\r\n        for(let i = 0; i<cellTissueCount; i++) {\r\n            await SampleStore.functions.getCellTissueSampleIndicatorByIndex(i).then(function(result) {\r\n            const cellTissueSample = {\r\n                id: parseInt(result[0]),\r\n                signer: result[1],\r\n                inStorage: result[2]\r\n            };\r\n            cellTissueSampleIndicators.push(cellTissueSample);\r\n        });\r\n        };\r\n\r\n        return {bloodSampleIndicators, cellTissueSampleIndicators}; \r\n      };\r\n\r\n      renderBloodRows() {\r\n        return this.props.bloodSampleIndicators.map((donation, index) => {\r\n            return (<BloodSampleRow\r\n                key={index}\r\n                donation={donation}\r\n            />\r\n            );\r\n        });\r\n      };\r\n\r\n      renderCellTissueRows() {\r\n        return this.props.cellTissueSampleIndicators.map((donation, index) => {\r\n            return (<CellTissueSampleRow\r\n                key={index}\r\n                donation={donation}\r\n            />\r\n            );\r\n        });\r\n      };\r\n\r\n    render() {\r\n        const { Header, Row, HeaderCell, Body } = Table;\r\n        return(\r\n            <Layout>\r\n                <h3>Blood Samples</h3>\r\n                <Table>\r\n                    <Header>\r\n                        <Row>\r\n                        <HeaderCell>Donation ID</HeaderCell>\r\n                        <HeaderCell>Signer</HeaderCell>\r\n                        <HeaderCell>In Storage</HeaderCell>\r\n                        <HeaderCell>Sample</HeaderCell>\r\n                        </Row>\r\n                    </Header>\r\n                    <Body>{this.renderBloodRows()}</Body>\r\n                </Table>\r\n                <h3>Cell and Tissue Samples</h3>\r\n                <Table>\r\n                    <Header>\r\n                        <Row>\r\n                        <HeaderCell>Donation ID</HeaderCell>\r\n                        <HeaderCell>Signer</HeaderCell>\r\n                        <HeaderCell>In Storage</HeaderCell>\r\n                        <HeaderCell>Sample</HeaderCell>\r\n                        </Row>\r\n                    </Header>\r\n                    <Body>{this.renderCellTissueRows()}</Body>\r\n                </Table>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SamplePage;\n\n\n// WEBPACK FOOTER //\n// ./pages/index.js"],"sourceRoot":""}